// AUTO-GENERATED by protoc-gen-webviewrpc
// JavaScript Server: HelloServiceServiceBase

// 메서드별 인코딩 함수를 가져옴
// Get encoding/decoding functions for each method
import { decodeHelloRequest, encodeHelloResponse, } from './hello_world.js';

/**
 * 추상 클래스 (C#의 HelloServiceBase)
 * 사용자(서버구현자)는 이 클래스를 상속해서 실제 로직을 override한다.
 * Abstract class (like C#'s HelloServiceBase)
 * Users (server implementors) should inherit this class and override the methods.
 */
export class HelloServiceBase {
  
  /**
   * async SayHello
   * @param { HelloRequest } requestObj
   * @returns {Promise< HelloResponse >}
   */
  async SayHello(requestObj) {
    throw new Error("Method SayHello must be implemented");
  }
  
}

/**
 * static BindService, (C#의 HelloService.BindService(impl))
 * - impl: HelloServiceBase implementation
 * - return: ServiceDefinition(methodHandlers)
 */
export class HelloService {
  static bindService(impl) {
    const def = {
      methodHandlers: {}
    };

    
    def.methodHandlers["HelloService.SayHello"] = async (reqBytes) => {
      const reqObj = decodeHelloRequest(reqBytes);
      const respObj = await impl.SayHello(reqObj);
      return encodeHelloResponse(respObj);
    };
    

    return def;
  }
}
